version: "3.9"
services:
  sqlserver:
    image: mcr.microsoft.com/mssql/server
    environment:
      SA_PASSWORD: Password1
      ACCEPT_EULA: "Y"
    ports:
      - "1433:1433"
    healthcheck:
      test: /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P "Password1" -Q "SELECT 1" -b -o /dev/null
      interval: 10s
      timeout: 3s
      retries: 10
      start_period: 10s

  seed:
    image: mcr.microsoft.com/dotnet/sdk:8.0
    env_file: .env
    depends_on:
      sqlserver:
        condition: service_healthy
    volumes:
      - "./:/app/"
    working_dir: /app
    command: [
      "dotnet", "run", "--project", "commands", "seed"
    ]

  app:
    build:
      context: .
      dockerfile: Dockerfile
    env_file: .env
    environment:
      DOTNET_DiagnosticPorts: /app/diag/dotnet-monitor.sock
    depends_on:
      - seed
      - monitor
    ports:
      - "8080:8080"
    volumes:
      - "./:/app/"
    entrypoint: [ "dotnet", "/app/src/bin/Debug/net8.0/AspnetTemplate.dll" ]
    healthcheck:
      test: curl http://localhost:8080/health
      interval: 10s
      timeout: 3s
      retries: 10
      start_period: 10s
  monitor:
    user: root
    image: mcr.microsoft.com/dotnet/monitor:8
    environment:
      DOTNETMONITOR_Storage__DefaultSharedPath: /diag
      DOTNETMONITOR_Metrics__Endpoints: http://+:52325
      DOTNETMONITOR_Urls: http://+:52323
      DOTNETMONITOR_DiagnosticPort__ConnectionMode: listen
      DOTNETMONITOR_DiagnosticPort__EndpointName: /diag/dotnet-monitor.sock
    command: [ "collect", "--no-auth" ]
    volumes:
      - "./diag:/diag"
    ports:
      - "52323:52323"
      - "52325:52325"
    
  send-load-sync:
    # https://github.com/rakyll/hey
    image: williamyeh/hey
    volumes:
      - .:/app
    command: [ "-z", "2m", "-c", "100", "http://app:8080/v1/diagnostics/sync"  ]
    depends_on:
      app:
        condition: service_healthy
      grafana:
        condition: service_healthy

  send-load-async:
    extends:
      service: send-load-sync
    command: [ "-z", "2m", "-c", "100", "http://app:8080/v1/diagnostics/async"  ]

  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - "./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml"
      - "prometheus-data:/prometheus"
    healthcheck:
      test: ["CMD", "wget", "-c", "http://localhost:9090"]
      interval: 10s
      timeout: 15s
      retries: 10
      start_period: 40s
  grafana:
    image: grafana/grafana-oss
    ports:
      - "3000:3000"
    volumes:
      # https://grafana.com/docs/grafana/latest/administration/provisioning/
      - "./grafana/provisioning/:/etc/grafana/provisioning/"
      - "./grafana/dashboards/:/var/lib/grafana/dashboards/"
    depends_on:
      prometheus:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "grafana-cli", "plugins", "ls"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

volumes:
  prometheus-data:
